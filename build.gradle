/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */
import org.opensearch.gradle.test.RestIntegTestTask

buildscript {
    ext {
        opensearch_version = System.getProperty("opensearch.version", "3.2.0-SNAPSHOT")
        version_qualifier = System.getProperty("build.version_qualifier", "")
        buildVersionQualifier = System.getProperty("build.version_qualifier", "")
        isSnapshot = "true" == System.getProperty("build.snapshot", "true")
        version_tokens = opensearch_version.tokenize('-')
        opensearch_build = version_tokens[0] + '.0'
        plugin_no_snapshot = opensearch_build
        if (buildVersionQualifier) {
            opensearch_build += "-${buildVersionQualifier}"
            plugin_no_snapshot += "-${buildVersionQualifier}"
        }
        if (isSnapshot) {
            opensearch_build += "-SNAPSHOT"
        }
        opensearch_group = "org.opensearch"
        opensearch_no_snapshot = opensearch_build.replace("-SNAPSHOT","")
    }
    repositories {
        mavenLocal()
        maven { url "https://central.sonatype.com/repository/maven-snapshots/" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "${opensearch_group}.gradle:build-tools:${opensearch_version}"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:6.25.0"
    }
}

allprojects {
    version = opensearch_version.tokenize('-')[0] + '.0'
    if (version_qualifier) {
        version += "-${version_qualifier}"
    }
    if (isSnapshot) {
        version += "-SNAPSHOT"
    }
}

repositories {
    mavenLocal()
    maven { url "https://central.sonatype.com/repository/maven-snapshots/" }
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}

apply plugin: 'opensearch.opensearchplugin'
apply plugin: 'opensearch.java-agent'
apply plugin: 'com.diffplug.spotless'
apply plugin: 'opensearch.pluginzip'
apply from: 'gradle/formatting.gradle'

opensearchplugin {
  description = 'Plugin for polling cluster state from etcd'
  classname = 'org.opensearch.cluster.etcd.ClusterETCDPlugin'
  licenseFile rootProject.file('LICENSE.txt')
  noticeFile rootProject.file('NOTICE.txt')
}

publishing {
    publications {
        pluginZip(MavenPublication) { publication ->
            pom {
                name = "cluster-etcd"
                description = "OpenSearch plugin for polling cluster state from etcd"
                groupId = "org.opensearch.plugin"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        name = "OpenSearch"
                        url = "https://github.com/opensearch-project/cluster-etcd"
                    }
                }
            }
        }
    }
}

// This requires an additional Jar not published as part of build-tools
loggerUsageCheck.enabled = false

afterEvaluate {
  project.validateNebulaPom.enabled = false
}


compileJava {
    dependsOn spotlessApply
}

task integTest(type: RestIntegTestTask) {
    description = "Run tests against a cluster"
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}
tasks.named("check").configure { dependsOn(integTest) }
tasks.named("check").configure { dependsOn(spotlessCheck) }

integTest {
    // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
    if (System.getProperty("test.debug") != null) {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
    }
}


def numNodes = findProperty('numNodes') as Integer ?: 1
def numZones = findProperty('numZones') as Integer ?: 1

testClusters.integTest {
    testDistribution = "ARCHIVE"

    if (numZones > 1) numberOfZones = numZones
    if (numNodes > 1) numberOfNodes = numNodes

    // This installs our plugin into the testClusters
    plugin(project.tasks.bundlePlugin.archiveFile)

    setting 'cluster.etcd.endpoint', 'http://localhost:2379'
}

run {
    useCluster testClusters.integTest
}

jacocoTestReport {
    reports {
        html.required = true
    }
}
test.finalizedBy(project.tasks.jacocoTestReport)

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.75
            }
        }
    }
}

check.dependsOn(jacocoTestCoverageVerification)

versions << [
  'docker': '3.3.6',
  'ducttape': '1.0.8',
  'failsafe': '3.3.2',
  'jetcd': '0.8.5',
  'vertx': '4.5.14',
  'testcontainers': '1.19.7'
]

dependencies {
  testImplementation "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
  api "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
  testImplementation "com.github.docker-java:docker-java-api:${versions.docker}"
  testImplementation "com.github.docker-java:docker-java-transport:${versions.docker}"
  testImplementation "com.github.docker-java:docker-java-transport-zerodep:${versions.docker}"
  runtimeOnly "com.google.api.grpc:proto-google-common-protos:2.54.1"
  runtimeOnly "com.google.guava:failureaccess:1.0.3"
  runtimeOnly "com.google.guava:guava:${versions.guava}"
  runtimeOnly "com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava"
  runtimeOnly "com.google.protobuf:protobuf-java:${versions.protobuf}"
  runtimeOnly "com.google.protobuf:protobuf-java-util:${versions.protobuf}"
  runtimeOnly "dev.failsafe:failsafe:${versions.failsafe}"
  implementation "io.etcd:jetcd-api:${versions.jetcd}"
  implementation "io.etcd:jetcd-common:${versions.jetcd}"
  implementation "io.etcd:jetcd-core:${versions.jetcd}"
  implementation "io.etcd:jetcd-grpc:${versions.jetcd}"
  testImplementation "io.etcd:jetcd-launcher:${versions.jetcd}"
  implementation "io.grpc:grpc-api:${versions.grpc}"
  implementation "io.grpc:grpc-context:${versions.grpc}"
  runtimeOnly "io.grpc:grpc-core:${versions.grpc}"
  implementation "io.grpc:grpc-grpclb:${versions.grpc}"
  implementation "io.grpc:grpc-netty:${versions.grpc}"
  implementation "io.grpc:grpc-protobuf:${versions.grpc}"
  implementation "io.grpc:grpc-protobuf-lite:${versions.grpc}"
  implementation "io.grpc:grpc-stub:${versions.grpc}"
  implementation "io.grpc:grpc-util:${versions.grpc}"
  implementation "io.netty:netty-buffer:${versions.netty}"
  implementation "io.netty:netty-codec:${versions.netty}"
  implementation "io.netty:netty-codec-dns:${versions.netty}"
  implementation "io.netty:netty-codec-http:${versions.netty}"
  implementation "io.netty:netty-codec-http2:${versions.netty}"
  implementation "io.netty:netty-codec-socks:${versions.netty}"
  implementation "io.netty:netty-common:${versions.netty}"
  implementation "io.netty:netty-handler:${versions.netty}"
  implementation "io.netty:netty-handler-proxy:${versions.netty}"
  implementation "io.netty:netty-resolver:${versions.netty}"
  implementation "io.netty:netty-resolver-dns:${versions.netty}"
  implementation "io.netty:netty-transport:${versions.netty}"
  implementation "io.netty:netty-transport-native-unix-common:${versions.netty}"
  implementation 'io.perfmark:perfmark-api:0.27.0'
  implementation "io.vertx:vertx-core:${versions.vertx}"
  implementation "io.vertx:vertx-grpc:${versions.vertx}"
  testImplementation "org.apache.commons:commons-compress:${versions.commonscompress}"
  testImplementation "org.rnorth.duct-tape:duct-tape:${versions.ducttape}"
  implementation "org.slf4j:slf4j-api:${versions.slf4j}"
  testImplementation "org.testcontainers:testcontainers:${versions.testcontainers}"
}

tasks.named("dependencyLicenses").configure {
  mapping from: /grpc-.*/, to: 'grpc'
  mapping from: /netty-.*/, to: 'netty'
  mapping from: /vertx-.*/, to: 'vertx'
}

thirdPartyAudit {
  ignoreMissingClasses(
    // from io.netty.logging.CommonsLoggerFactory (netty)
    'org.apache.commons.logging.Log',
    'org.apache.commons.logging.LogFactory',

    // from Log4j (deliberate, Netty will fallback to Log4j 2)
    'org.apache.log4j.Level',
    'org.apache.log4j.Logger',

    // from io.netty.handler.ssl.util.BouncyCastleSelfSignedCertGenerator (netty)
    'org.bouncycastle.cert.X509v3CertificateBuilder',
    'org.bouncycastle.cert.jcajce.JcaX509CertificateConverter',
    'org.bouncycastle.operator.jcajce.JcaContentSignerBuilder',
    'org.bouncycastle.openssl.PEMEncryptedKeyPair',
    'org.bouncycastle.openssl.PEMParser',
    'org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter',
    'org.bouncycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder',
    'org.bouncycastle.openssl.jcajce.JcePEMDecryptorProviderBuilder',
    'org.bouncycastle.pkcs.PKCS8EncryptedPrivateKeyInfo',

    // from io.netty.handler.ssl.JettyNpnSslEngine (netty)
    'org.eclipse.jetty.npn.NextProtoNego$ClientProvider',
    'org.eclipse.jetty.npn.NextProtoNego$ServerProvider',
    'org.eclipse.jetty.npn.NextProtoNego',

    // from io.netty.handler.codec.marshalling.ChannelBufferByteInput (netty)
    'org.jboss.marshalling.ByteInput',

    // from io.netty.handler.codec.marshalling.ChannelBufferByteOutput (netty)
    'org.jboss.marshalling.ByteOutput',

    // from io.netty.handler.codec.marshalling.CompatibleMarshallingEncoder (netty)
    'org.jboss.marshalling.Marshaller',

    // from io.netty.handler.codec.marshalling.ContextBoundUnmarshallerProvider (netty)
    'org.jboss.marshalling.MarshallerFactory',
    'org.jboss.marshalling.MarshallingConfiguration',
    'org.jboss.marshalling.Unmarshaller',

    'com.google.gson.stream.JsonReader',
    'com.google.gson.stream.JsonToken',
    'com.google.protobuf.nano.CodedOutputByteBufferNano',
    'com.google.protobuf.nano.MessageNano',
    'com.ning.compress.BufferRecycler',
    'com.ning.compress.lzf.ChunkDecoder',
    'com.ning.compress.lzf.ChunkEncoder',
    'com.ning.compress.lzf.LZFChunk',
    'com.ning.compress.lzf.LZFEncoder',
    'com.ning.compress.lzf.util.ChunkDecoderFactory',
    'com.ning.compress.lzf.util.ChunkEncoderFactory',
    'lzma.sdk.lzma.Encoder',
    'net.jpountz.lz4.LZ4Compressor',
    'net.jpountz.lz4.LZ4Factory',
    'net.jpountz.lz4.LZ4FastDecompressor',
    'net.jpountz.xxhash.XXHash32',
    'net.jpountz.xxhash.XXHashFactory',
    'org.eclipse.jetty.alpn.ALPN$ClientProvider',
    'org.eclipse.jetty.alpn.ALPN$ServerProvider',
    'org.eclipse.jetty.alpn.ALPN',

    'org.conscrypt.AllocatedBuffer',
    'org.conscrypt.BufferAllocator',
    'org.conscrypt.Conscrypt',
    'org.conscrypt.HandshakeListener',

    'reactor.blockhound.BlockHound$Builder',
    'reactor.blockhound.integration.BlockHoundIntegration',

     'com.aayushatharva.brotli4j.Brotli4jLoader',
     'com.aayushatharva.brotli4j.decoder.DecoderJNI$Status',
     'com.aayushatharva.brotli4j.decoder.DecoderJNI$Wrapper',
     'com.aayushatharva.brotli4j.encoder.BrotliEncoderChannel',
     'com.aayushatharva.brotli4j.encoder.Encoder$Mode',
     'com.aayushatharva.brotli4j.encoder.Encoder$Parameters',
     'com.fasterxml.jackson.databind.DeserializationContext',
     'com.fasterxml.jackson.databind.JsonDeserializer',
     'com.fasterxml.jackson.databind.JsonSerializer',
     'com.fasterxml.jackson.databind.ObjectMapper',
     'com.fasterxml.jackson.databind.ObjectWriter',
     'com.fasterxml.jackson.databind.SerializationFeature',
     'com.fasterxml.jackson.databind.SerializerProvider',
     'com.fasterxml.jackson.databind.module.SimpleModule',
     'com.google.gson.Gson',
     'com.google.gson.GsonBuilder',
     'com.google.gson.JsonArray',
     'com.google.gson.JsonElement',
     'com.google.gson.JsonIOException',
     'com.google.gson.JsonObject',
     'com.google.gson.JsonParser',
     'com.google.gson.JsonPrimitive',
     'io.grpc.stub.BlockingClientCall',
     'io.netty.channel.epoll.Epoll',
     'io.netty.channel.epoll.EpollChannelOption',
     'io.netty.channel.epoll.EpollEventLoopGroup',
     'io.netty.channel.kqueue.KQueue',
     'io.netty.channel.kqueue.KQueueChannelOption',
     'io.netty.channel.kqueue.KQueueEventLoopGroup',
     'io.netty.handler.codec.haproxy.HAProxyMessage',
     'io.netty.handler.codec.haproxy.HAProxyProxiedProtocol',
     'io.netty.handler.codec.haproxy.HAProxyProxiedProtocol$TransportProtocol',
     'io.netty.internal.tcnative.AsyncSSLPrivateKeyMethod',
     'io.netty.internal.tcnative.AsyncTask',
     'io.netty.internal.tcnative.Buffer',
     'io.netty.internal.tcnative.CertificateCallback',
     'io.netty.internal.tcnative.CertificateCompressionAlgo',
     'io.netty.internal.tcnative.CertificateVerifier',
     'io.netty.internal.tcnative.Library',
     'io.netty.internal.tcnative.ResultCallback',
     'io.netty.internal.tcnative.SSL',
     'io.netty.internal.tcnative.SSLContext',
     'io.netty.internal.tcnative.SSLPrivateKeyMethod',
     'io.netty.internal.tcnative.SSLSession',
     'io.netty.internal.tcnative.SSLSessionCache',
     'io.netty.internal.tcnative.SessionTicketKey',
     'io.netty.internal.tcnative.SniHostNameMatcher',
     'org.slf4j.impl.StaticLoggerBinder',
     'org.slf4j.impl.StaticMDCBinder',
     'org.slf4j.impl.StaticMarkerBinder'
  )

  ignoreViolations(
    // uses internal java api: sun.misc.Unsafe
    'com.google.common.cache.Striped64',
    'com.google.common.cache.Striped64$1',
    'com.google.common.cache.Striped64$Cell',
    'com.google.common.hash.Striped64',
    'com.google.common.hash.Striped64$1',
    'com.google.common.hash.Striped64$Cell',
    'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray',
    'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$1',
    'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$2',
    'com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper',
    'com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1',
    'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator',
    'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1',
     'com.google.protobuf.MessageSchema',
     'com.google.protobuf.UnsafeUtil',
     'com.google.protobuf.UnsafeUtil$1',
     'com.google.protobuf.UnsafeUtil$Android32MemoryAccessor',
     'com.google.protobuf.UnsafeUtil$Android64MemoryAccessor',
     'com.google.protobuf.UnsafeUtil$JvmMemoryAccessor',
     'com.google.protobuf.UnsafeUtil$MemoryAccessor',
     'io.netty.handler.ssl.util.OpenJdkSelfSignedCertGenerator',
     'io.netty.handler.ssl.util.OpenJdkSelfSignedCertGenerator$1',
     'io.netty.handler.ssl.util.OpenJdkSelfSignedCertGenerator$2',
     'io.netty.handler.ssl.util.OpenJdkSelfSignedCertGenerator$3',
     'io.netty.handler.ssl.util.OpenJdkSelfSignedCertGenerator$4',
     'io.netty.handler.ssl.util.OpenJdkSelfSignedCertGenerator$5',
     'io.netty.util.internal.PlatformDependent0',
     'io.netty.util.internal.PlatformDependent0$1',
     'io.netty.util.internal.PlatformDependent0$2',
     'io.netty.util.internal.PlatformDependent0$3',
     'io.netty.util.internal.PlatformDependent0$4',
     'io.netty.util.internal.PlatformDependent0$6',
     'io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueueConsumerNodeRef',
     'io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueueProducerNodeRef',
     'io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields',
     'io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields',
     'io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields',
     'io.netty.util.internal.shaded.org.jctools.queues.LinkedQueueNode',
     'io.netty.util.internal.shaded.org.jctools.queues.MpmcArrayQueueConsumerIndexField',
     'io.netty.util.internal.shaded.org.jctools.queues.MpmcArrayQueueProducerIndexField',
     'io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueConsumerIndexField',
     'io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerIndexField',
     'io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField',
     'io.netty.util.internal.shaded.org.jctools.queues.unpadded.MpscUnpaddedArrayQueueConsumerIndexField',
     'io.netty.util.internal.shaded.org.jctools.queues.unpadded.MpscUnpaddedArrayQueueProducerIndexField',
     'io.netty.util.internal.shaded.org.jctools.queues.unpadded.MpscUnpaddedArrayQueueProducerLimitField',
     'io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess',
     'io.netty.util.internal.shaded.org.jctools.util.UnsafeLongArrayAccess',
     'io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess',
    )
}
